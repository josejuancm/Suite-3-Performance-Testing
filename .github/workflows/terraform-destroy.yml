name: 'Terraform Destroy'

on:
  workflow_dispatch:
    inputs:
      resource_group_name:
        description: 'Resource group name containing the tfstate'
        required: true
      storage_account_name:
        description: 'Storage account name containing the tfstate'
        required: true
      container_name:
        description: 'Container name containing the tfstate'
        required: true
        default: 'tfstate'
      state_key:
        description: 'State file name'
        required: true
        default: 'terraform.tfstate'

permissions:
  contents: read

env:
  ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./eng/terraform
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform init -backend-config="resource_group_name=${{ inputs.resource_group_name }}" -backend-config="storage_account_name=${{ inputs.storage_account_name }}" -backend-config="container_name=${{ inputs.container_name }}" -backend-config="key=${{ inputs.state_key }}"
      id: init

    - name: Validate State File
      run: |
        echo "üîç Validating state file details:"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "Resource Group: ${{ inputs.resource_group_name }}"
        echo "Storage Account: ${{ inputs.storage_account_name }}"
        echo "Container: ${{ inputs.container_name }}"
        echo "State Key: ${{ inputs.state_key }}"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        if terraform show > /dev/null 2>&1; then
          echo "‚úÖ State file successfully loaded!"
          echo "üìã Current state contents:"
          
          # Save state to a file first
          terraform show -json > tf_state.json
          
          if [ -s tf_state.json ]; then
            # Check if there are any resources
            RESOURCE_COUNT=$(jq -r '.values.root_module.resources | length // 0' tf_state.json)
            
            if [ "$RESOURCE_COUNT" -gt 0 ]; then
              jq -r '.values.root_module.resources[] | "‚Ä¢ \(.address) (\(.type))"' tf_state.json
              echo "üìä Total resources in state: ${RESOURCE_COUNT}"
            else
              echo "No resources found in state file"
            fi
          else
            echo "State file is empty or invalid"
          fi
          
          rm -f tf_state.json
        else
          echo "‚ùå Failed to load state file or state file not found"
          echo "Please verify your backend configuration"
          exit 1
        fi
        
        echo "‚è≥ Waiting for 30 seconds before proceeding with destroy..."
        echo "   Press Ctrl+C to cancel if this is not the correct state file"
        sleep 30
      id: validate

    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      id: destroy
      continue-on-error: true

    - name: Terraform Destroy Status
      if: steps.destroy.outcome == 'failure'
      run: |
        echo "Terraform destroy failed. Checking state..."
        terraform show
        exit 1