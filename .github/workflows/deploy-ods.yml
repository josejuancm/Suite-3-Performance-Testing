name: Deploy ODS

on:
  workflow_dispatch:
    inputs:
      vm_name:
        description: "The name of the VM to run the command on"
        required: true
      resource_group:
        description: "The resource group of the VM"
        required: true
      target_environment:
        description: "Select the environment"
        required: true
        type: choice
        options:
          - develop
        default: staging

env:
  ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.target_environment }}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ env.ARM_CLIENT_ID }}","clientSecret":"${{ env.ARM_CLIENT_SECRET }}","subscriptionId":"${{ env.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ env.ARM_TENANT_ID }}"}'

      - name: Run Deployment Commands
        run: |
          az vm run-command invoke \
            --command-id RunPowerShellScript \
            --name "${{ github.event.inputs.vm_name }}" \
            --resource-group "${{ github.event.inputs.resource_group }}" \
            --scripts '
            $script = {
                Set-Location "C:\Temp\EdFi.Suite3.RestApi.Databases.Standard"
                Import-Module .\Deployment.psm1
                Initialize-DeploymentEnvironment
            }
            
            # Create a new elevated PowerShell process and capture its output
            $encodedCommand = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($script))
            $output = Start-Process powershell -Verb RunAs -ArgumentList "-EncodedCommand $encodedCommand" -Wait -PassThru -RedirectStandardOutput "C:\Windows\Temp\deploy-output.txt" -RedirectStandardError "C:\Windows\Temp\deploy-error.txt"
            
            # Display the output
            Write-Host "=== Standard Output ==="
            if (Test-Path "C:\Windows\Temp\deploy-output.txt") {
                Get-Content "C:\Windows\Temp\deploy-output.txt"
            }
            
            Write-Host "=== Error Output ==="
            if (Test-Path "C:\Windows\Temp\deploy-error.txt") {
                Get-Content "C:\Windows\Temp\deploy-error.txt"
            }
            
            # Check the exit code
            if ($output.ExitCode -ne 0) {
                Write-Error "Deployment failed with exit code: $($output.ExitCode)"
                exit 1
            }' 