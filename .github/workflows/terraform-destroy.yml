name: 'Terraform Destroy'

on:
  workflow_dispatch:
    inputs:
      prefix:
        description: 'Resource Prefix'
        required: true
        default: 'jar'
      label:
        description: 'Environment Label'
        required: true
        default: 'ods-perf-test'
      environment:
        description: 'Environment to destroy'
        required: true
        type: environment
        default: 'develop'

permissions:
  contents: read

env:
  ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: develop

    defaults:
      run:
        working-directory: ./eng/terraform
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Create backend.tf
      run: |
        # Calculate the same state file name as used in deploy
        STATE_FILE="${{ inputs.prefix }}-${{ inputs.label }}.tfstate"
        RESOURCE_GROUP="${{ inputs.prefix }}-${{ inputs.label }}"
        
        # Get the storage account name
        STORAGE_ACCOUNT=$(az storage account list --resource-group ${RESOURCE_GROUP} --query "[0].name" -o tsv)
        
        # Create the backend configuration
        cat > backend.tf << EOF
        terraform {
          backend "azurerm" {}
        }
        EOF
        
        echo "Created backend.tf for Azure storage"
      working-directory: ./eng/terraform

    - name: Validate State File
      run: |
        # Calculate the same state file name as used in deploy
        STATE_FILE="${{ inputs.prefix }}-${{ inputs.label }}.tfstate"
        RESOURCE_GROUP="${{ inputs.prefix }}-${{ inputs.label }}"
        
        echo "üîç Validating state file details:"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "Resource Group: ${RESOURCE_GROUP}"
        echo "Container: tfstate"
        echo "State Key: ${STATE_FILE}"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        # List available storage accounts in the resource group
        echo "üì¶ Available storage accounts in resource group:"
        az storage account list --resource-group ${RESOURCE_GROUP} --query "[].name" -o tsv || {
          echo "‚ùå Failed to list storage accounts. Make sure the resource group exists."
          exit 1
        }
        
        # Get the storage account name
        STORAGE_ACCOUNT=$(az storage account list --resource-group ${RESOURCE_GROUP} --query "[0].name" -o tsv)
        
        if [ -z "$STORAGE_ACCOUNT" ]; then
          echo "‚ùå No storage account found in resource group ${RESOURCE_GROUP}"
          exit 1
        fi
        
        echo "Using storage account: ${STORAGE_ACCOUNT}"
        
        # Initialize Terraform with the correct backend config
        terraform init -backend=true \
          -backend-config="resource_group_name=${RESOURCE_GROUP}" \
          -backend-config="storage_account_name=${STORAGE_ACCOUNT}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=${STATE_FILE}"
        
        # Try to show state
        if terraform show > /dev/null 2>&1; then
          echo "‚úÖ State file accessed successfully!"
          echo "üìã Current state contents:"
          terraform show
          
          echo -e "\nüìë Resources in state:"
          terraform state list || echo "No resources found in state"
        else
          echo "‚ùå Failed to access state file"
          echo "Please verify your backend configuration and permissions"
          exit 1
        fi
        
        echo -e "\n‚ö†Ô∏è  Are you sure you want to proceed with destroy?"
        echo "‚è≥ Waiting for 30 seconds before proceeding..."
        echo "   Press Ctrl+C to cancel if this is not the correct state file"
        sleep 30
      working-directory: ./eng/terraform

    - name: Azure Login
      run: |
        az login --service-principal \
          --username "$ARM_CLIENT_ID" \
          --password "$ARM_CLIENT_SECRET" \
          --tenant "$ARM_TENANT_ID"
        az account set --subscription "$ARM_SUBSCRIPTION_ID"
      working-directory: ./eng/terraform

    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      id: destroy
      continue-on-error: true

    - name: Terraform Destroy Status
      if: steps.destroy.outcome == 'failure'
      run: |
        echo "Terraform destroy failed. Checking state..."
        terraform show
        exit 1