name: Deploy ODS

on:
  workflow_dispatch:
    inputs:
      vm_name:
        description: "The name of the VM to run the command on"
        required: true
      resource_group:
        description: "The resource group of the VM"
        required: true
      target_environment:
        description: "Select the environment"
        required: true
        type: choice
        options:
          - develop
        default: staging

env:
  ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.target_environment }}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ env.ARM_CLIENT_ID }}","clientSecret":"${{ env.ARM_CLIENT_SECRET }}","subscriptionId":"${{ env.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ env.ARM_TENANT_ID }}"}'

      - name: Run Deployment Commands
        run: |
          az vm run-command invoke \
            --command-id RunPowerShellScript \
            --name "${{ github.event.inputs.vm_name }}" \
            --resource-group "${{ github.event.inputs.resource_group }}" \
            --scripts '
            $ErrorActionPreference = "Continue"
            $VerbosePreference = "Continue"
            
            cd "C:\Temp\EdFi.Suite3.RestApi.Databases.Standard"
            Write-Host "Starting deployment at $(Get-Date)"
            
            # First try running EdFi.Db.Deploy directly to see its output
            Write-Host "Testing EdFi.Db.Deploy directly..."
            $deployOutput = & ".\tools\EdFi.Db.Deploy.exe" 2>&1
            Write-Host "Deploy tool output: $deployOutput"
            
            Write-Host "Proceeding with normal deployment..."
            Import-Module .\Deployment.psm1
            
            # Run Initialize-DeploymentEnvironment with transcript
            Start-Transcript -Path "C:\Windows\Temp\deployment.log" -Append
            try {
                Initialize-DeploymentEnvironment
            }
            finally {
                Stop-Transcript
                if (Test-Path "C:\Windows\Temp\deployment.log") {
                    Write-Host "=== Deployment Log ==="
                    Get-Content "C:\Windows\Temp\deployment.log"
                }
            }
            
            Write-Host "Deployment completed at $(Get-Date)"' 