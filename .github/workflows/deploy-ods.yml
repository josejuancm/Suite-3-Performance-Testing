name: Deploy ODS

on:
  workflow_dispatch:
    inputs:
      vm_name:
        description: "The name of the VM to run the command on"
        required: true
      resource_group:
        description: "The resource group of the VM"
        required: true
      target_environment:
        description: "Select the environment"
        required: true
        type: choice
        options:
          - develop
        default: staging

env:
  ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.target_environment }}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ env.ARM_CLIENT_ID }}","clientSecret":"${{ env.ARM_CLIENT_SECRET }}","subscriptionId":"${{ env.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ env.ARM_TENANT_ID }}"}'

      - name: Run Deployment Commands
        run: |
          az vm run-command invoke \
            --command-id RunPowerShellScript \
            --name "${{ github.event.inputs.vm_name }}" \
            --resource-group "${{ github.event.inputs.resource_group }}" \
            --scripts '
            $ErrorActionPreference = "Continue"
            
            cd "C:\Temp\EdFi.Suite3.RestApi.Databases.Standard"
            
            Write-Host "Current location: $(Get-Location)"
            Write-Host "Checking EdFi.Db.Deploy tool..."
            if (Test-Path ".\tools\EdFi.Db.Deploy.exe") {
                Write-Host "EdFi.Db.Deploy.exe exists"
                $toolVersion = (Get-Item ".\tools\EdFi.Db.Deploy.exe").VersionInfo.FileVersion
                Write-Host "Tool version: $toolVersion"
            } else {
                Write-Error "EdFi.Db.Deploy.exe not found!"
                exit 1
            }
            
            Write-Host "Importing module..."
            Import-Module .\Deployment.psm1 -Verbose
            
            Write-Host "Getting available commands..."
            Get-Command -Module Deployment | Format-Table -AutoSize
            
            Write-Host "Starting deployment..."
            try {
                Initialize-DeploymentEnvironment -Verbose
                Write-Host "Deployment completed successfully"
            }
            catch {
                Write-Error "Deployment failed with error: $_"
                Write-Error "Stack trace: $($_.ScriptStackTrace)"
                Write-Host "Checking SQL Server status..."
                $sqlService = Get-Service -Name MSSQLSERVER -ErrorAction SilentlyContinue
                if ($sqlService) {
                    Write-Host "SQL Server status: $($sqlService.Status)"
                }
                exit 1
            }' 