name: 'Terraform Destroy'

on:
  workflow_dispatch:
    inputs:
      resource_group_name:
        description: 'Resource group name containing the tfstate'
        required: true
      storage_account_name:
        description: 'Storage account name containing the tfstate'
        required: true
      container_name:
        description: 'Container name containing the tfstate'
        required: true
        default: 'tfstate'
      state_key:
        description: 'State file name'
        required: true
        default: 'terraform.tfstate'

permissions:
  contents: read

env:
  ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./eng/terraform
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform init -backend-config="resource_group_name=${{ inputs.resource_group_name }}" -backend-config="storage_account_name=${{ inputs.storage_account_name }}" -backend-config="container_name=${{ inputs.container_name }}" -backend-config="key=${{ inputs.state_key }}"
      id: init

    - name: Terraform Destroy
      run: terraform destroy -auto-approve -input=false -no-color -var="prefix=${{ vars.TF_VAR_PREFIX }}" -var="label=${{ vars.TF_VAR_LABEL }}" -var="web_admin_username=${{ vars.TF_VAR_WEB_ADMIN_USERNAME }}" -var="web_admin_password=${{ secrets.TF_VAR_WEB_ADMIN_PASSWORD }}" -var="runner_admin_username=${{ vars.TF_VAR_RUNNER_ADMIN_USERNAME }}" -var="runner_admin_password=${{ secrets.TF_VAR_RUNNER_ADMIN_PASSWORD }}" -var="sql_admin_username=${{ vars.TF_VAR_SQL_ADMIN_USERNAME }}" -var="sql_admin_password=${{ secrets.TF_VAR_SQL_ADMIN_PASSWORD }}"
      id: destroy
      continue-on-error: true

    - name: Terraform Destroy Status
      if: steps.destroy.outcome == 'failure'
      run: |
        echo "Terraform destroy failed. Checking state..."
        terraform show
        exit 1